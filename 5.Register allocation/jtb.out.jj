//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(microIRParser)
import syntaxtree.*;
import java.util.Vector;


public class microIRParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(microIRParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <LSQPAREN: "[">
   | <RSQPAREN: "]">
   | <DOT: ".">
   | <LT: "LT">
   | <LE: "LE">
   | <GT: "GT">
   | <GE: "GE">
   | <NE: "NE">
   | <EQ: "EQ">
   | <PLUS: "PLUS">
   | <MINUS: "MINUS">
   | <AND: "AND">
   | <OR: "OR">
   | <NOT: "NOT">
   | <TIMES: "TIMES">
   | <MAIN: "MAIN">
   | <CODE: "CODE">
   | <HALLOCATE: "HALLOCATE">
   | <END: "END">
   | <NOOP: "NOOP">
   | <MOVE: "MOVE">
   | <CALL: "CALL">
   | <ERROR: "ERROR">
   | <PRINT: "PRINT">
   | <BEGIN: "BEGIN">
   | <RETURN: "RETURN">
   | <JUMP: "JUMP">
   | <CJUMP: "CJUMP">
   | <HSTORE: "HSTORE">
   | <HLOAD: "HLOAD">
   | <MEM: "MEM">
   | <TEMP: "TEMP">
   | <ARG: "ARG">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Goal Goal() :
{
   NodeToken n0;
   Token n1;
   StmtList n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   Procedure n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="MAIN" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=StmtList()
   n4="END" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=Procedure()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n8=<EOF> { 
      n8.beginColumn++; n8.endColumn++;
      n7 = JTBToolkit.makeNodeToken(n8);
   }
   
   { return new Goal(n0,n2,n3,n5,n7); }
}

StmtList StmtList() :
{
   NodeListOptional n0 = new NodeListOptional();
   NodeSequence n1;
   NodeOptional n2;
   Label n3;
   Stmt n4;

   
}
{
   (
      { n2 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      (
         n3=Label()
         { n2.addNode(n3); }
      )?
      { n1.addNode(n2); }
      n4=Stmt()
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new StmtList(n0); }
}

Procedure Procedure() :
{
   Label n0;
   NodeToken n1;
   Token n2;
   IntegerLiteral n3;
   NodeToken n4;
   Token n5;
   StmtExp n6;

   
}
{
   n0=Label()
   n2="[" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=IntegerLiteral()
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=StmtExp()
   
   { return new Procedure(n0,n1,n3,n4,n6); }
}

Stmt Stmt() :
{
   NodeChoice n0;
   NoOpStmt n1;
   ErrorStmt n2;
   CJumpStmt n3;
   JumpStmt n4;
   HStoreStmt n5;
   HLoadStmt n6;
   MoveStmt n7;
   PrintStmt n8;

   
}
{
   (
      n1=NoOpStmt()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ErrorStmt()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=CJumpStmt()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=JumpStmt()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=HStoreStmt()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=HLoadStmt()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=MoveStmt()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=PrintStmt()
      { n0 = new NodeChoice(n8, 7); }
   )
   
   { return new Stmt(n0); }
}

NoOpStmt NoOpStmt() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="NOOP" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new NoOpStmt(n0); }
}

ErrorStmt ErrorStmt() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="ERROR" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ErrorStmt(n0); }
}

CJumpStmt CJumpStmt() :
{
   NodeToken n0;
   Token n1;
   Temp n2;
   Label n3;

   
}
{
   n1="CJUMP" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Temp()
   n3=Label()
   
   { return new CJumpStmt(n0,n2,n3); }
}

JumpStmt JumpStmt() :
{
   NodeToken n0;
   Token n1;
   Label n2;

   
}
{
   n1="JUMP" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Label()
   
   { return new JumpStmt(n0,n2); }
}

HStoreStmt HStoreStmt() :
{
   NodeToken n0;
   Token n1;
   Temp n2;
   IntegerLiteral n3;
   Temp n4;

   
}
{
   n1="HSTORE" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Temp()
   n3=IntegerLiteral()
   n4=Temp()
   
   { return new HStoreStmt(n0,n2,n3,n4); }
}

HLoadStmt HLoadStmt() :
{
   NodeToken n0;
   Token n1;
   Temp n2;
   Temp n3;
   IntegerLiteral n4;

   
}
{
   n1="HLOAD" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Temp()
   n3=Temp()
   n4=IntegerLiteral()
   
   { return new HLoadStmt(n0,n2,n3,n4); }
}

MoveStmt MoveStmt() :
{
   NodeToken n0;
   Token n1;
   Temp n2;
   Exp n3;

   
}
{
   n1="MOVE" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Temp()
   n3=Exp()
   
   { return new MoveStmt(n0,n2,n3); }
}

PrintStmt PrintStmt() :
{
   NodeToken n0;
   Token n1;
   SimpleExp n2;

   
}
{
   n1="PRINT" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SimpleExp()
   
   { return new PrintStmt(n0,n2); }
}

Exp Exp() :
{
   NodeChoice n0;
   Call n1;
   HAllocate n2;
   BinOp n3;
   SimpleExp n4;

   
}
{
   (
      n1=Call()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=HAllocate()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=BinOp()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=SimpleExp()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new Exp(n0); }
}

StmtExp StmtExp() :
{
   NodeToken n0;
   Token n1;
   StmtList n2;
   NodeToken n3;
   Token n4;
   SimpleExp n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="BEGIN" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=StmtList()
   n4="RETURN" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=SimpleExp()
   n7="END" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new StmtExp(n0,n2,n3,n5,n6); }
}

Call Call() :
{
   NodeToken n0;
   Token n1;
   SimpleExp n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   Temp n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="CALL" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SimpleExp()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=Temp()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new Call(n0,n2,n3,n5,n7); }
}

HAllocate HAllocate() :
{
   NodeToken n0;
   Token n1;
   SimpleExp n2;

   
}
{
   n1="HALLOCATE" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SimpleExp()
   
   { return new HAllocate(n0,n2); }
}

BinOp BinOp() :
{
   Operator n0;
   Temp n1;
   SimpleExp n2;

   
}
{
   n0=Operator()
   n1=Temp()
   n2=SimpleExp()
   
   { return new BinOp(n0,n1,n2); }
}

Operator Operator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2="LT" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="PLUS" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="MINUS" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="TIMES" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new Operator(n0); }
}

SimpleExp SimpleExp() :
{
   NodeChoice n0;
   Temp n1;
   IntegerLiteral n2;
   Label n3;

   
}
{
   (
      n1=Temp()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=IntegerLiteral()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Label()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new SimpleExp(n0); }
}

Temp Temp() :
{
   NodeToken n0;
   Token n1;
   IntegerLiteral n2;

   
}
{
   n1="TEMP" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=IntegerLiteral()
   
   { return new Temp(n0,n2); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

Label Label() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Label(n0); }
}
