//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst3<R,A> extends GJDepthFirst2<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   int stmtcount;
   String presentfunc;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
     
    	  if ( n.present() ) {
    	         R _ret=null;
    	         int _count=0;
    	         LinkedList<R> l = new LinkedList<R>();
    	         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
    	            l.add(e.nextElement().accept(this,argu));
    	            _count++;
    	         }
    	         return (R) l;
    	      }
    	      else
    	         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ){
         String lab=(String) n.node.accept(this,argu);
         System.out.println(" "+lab+"\n");
         return (R)lab;
         }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      stmtcount=0;
      R _ret=null;
      tobepassed pass=(tobepassed)argu;
      spilltobereported=pass.spilltobereported;
      maxargcall=pass.maxargcall;
      
      registerallocation=pass.registerallocation;
      spillallocatedforfunc=pass.spillallocatedforfunc;
      maxnumcall=pass.maxnumcall;
      n.f0.accept(this, argu);
      presentfunc="MAIN";
      System.out.println("MAIN [0] ["+(2+spillallocatedforfunc.get(presentfunc)+maxargcall.get(presentfunc))+"] ["+maxargcall.get(presentfunc)+"] \n");
      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("END\n");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("// Number of vars after packing ="+0 +"; Number of Spilled vars ="+spilltobereported);
      return (R)label;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      stmtcount++;
      presentfunc=(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer param=Integer.parseInt((String)n.f2.accept(this, argu));
      System.out.println(presentfunc+" ["+param+"] ["+(2+spillallocatedforfunc.get(presentfunc)+maxargcall.get(presentfunc))+"] ["+maxargcall.get(presentfunc)+"] \n");
      int i,t=0;
      if(param>4)
    	  t=param-4;
      for(i=0;i<8;i++){
    	  System.out.println("ASTORE SPILLEDARG "+(i+t)+" s"+i+"\n");
      }
      for(i=0;i<10;i++){
    	  System.out.println("ASTORE SPILLEDARG "+(i+t+8)+" t"+i+"\n");
      }
      for(i=0;i<4 &&i<param;i++){
    	  	System.out.println("MOVE s"+i+" a"+i+"\n");
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      for(i=0;i<8;i++){
    	  System.out.println("ALOAD s"+i+" SPILLEDARG "+(i+t)+"\n");
      }
      for(i=0;i<10;i++){
    	  System.out.println("ALOAD t"+i+" SPILLEDARG "+(i+t+8)+"\n");
      }
      System.out.println(" END\n");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      stmtcount++;
      n.f0.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" NOOP\n");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" ERROR\n");
      return _ret;
   }
   String getregister(Integer t,int flag,int[] spill,int[] spnum){
	   allocation b=registerallocation.get(presentfunc).get(t);
	   if(b.flag==1)
		   return b.register;
	   spill[0]=1;
	   spnum[0]=b.spilled;
	   if(flag!=-1)
		   System.out.println(" ALOAD v"+flag+" SPILLEDARG "+b.spilled+"\n");
	   return "v"+flag;
	   
   }
   

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t=(String)n.f1.accept(this, argu);
      String lab=(String)n.f2.accept(this, argu);
      int[] sp={0},spnum={-1};
      System.out.println(" CJUMP "+getregister(Integer.parseInt(t),1,sp,spnum)+" "+lab+"\n");
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lb=(String)n.f1.accept(this, argu);
      System.out.println(" JUMP "+lb+"\n");
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer t1=Integer.parseInt((String)n.f1.accept(this, argu));
      
      String literal=(String)n.f2.accept(this, argu);
      Integer t2=Integer.parseInt((String)n.f3.accept(this, argu));
      int[] sp1={0},sp2={0},spnum1={-1},spnum2={-1};
      String b=getregister(t1,0,sp1,spnum1);
      String c=getregister(t2, 1, sp2,spnum2);
      System.out.println(" HSTORE "+b+" "+literal+" "+c+"\n");
      
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer t1=Integer.parseInt((String)n.f1.accept(this, argu));
      Integer t2=Integer.parseInt((String)n.f2.accept(this, argu));
      String literal=(String)n.f3.accept(this, argu);
      int[] sp1={0},sp2={0},spnum1={-1},spnum2={-1};
      String b1=getregister(t1,0,sp1,spnum1);
      String b2=getregister(t2,1,sp2,spnum2);
      
    	  System.out.println(" HLOAD "+b1+" "+b2+" "+literal+"\n");
      if(sp1[0]==1)
    	  System.out.println(" ASTORE SPILLEDARG "+spnum1[0]+" "+b1+"\n");
     
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer t=Integer.parseInt((String)n.f1.accept(this, argu));
      argu=(A)t;
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String b=(String)n.f1.accept(this, argu);
      System.out.println(" PRINT "+b+"\n");
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      if(n.f0.which==3){
    	  String b=(String)_ret;
    	  int[] sp={0},spnum={-1};
    	  String c=getregister((Integer)argu,-1,sp,spnum);
    	  if(sp[0]==1)
    		  System.out.println("ASTORE SPILLEDARG "+spnum[0]+" "+b+"\n");
    	  
    	  else
    		  System.out.println("MOVE "+c+" "+b+"\n");
      }
      if(n.f0.which==1){
    	  String b=(String)_ret;
    	  int[] sp={0},spnum={-1};
    	  String c=getregister((Integer)argu,0,sp,spnum);
    	  System.out.println(" MOVE "+c+" HALLOCATE "+b+"\n");
    	  if(sp[0]==1)
    		  System.out.println(" ASTORE SPILLEDARG "+spnum[0]+ " "+c+"\n");
      }
      if(n.f0.which==0){
    	  
    	  int[] sp={0},spnum={-1};
    	  String c=getregister((Integer)argu,-1,sp,spnum);
    	  if(sp[0]==1)
    		  System.out.println(" ASTORE SPILLEDARG "+spnum[0]+" v0 \n");
    	  else
    		  System.out.println(" MOVE "+c+" v0\n");
    	  
      }
    	
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      stmtcount++;
      String b=(String)n.f3.accept(this, argu);
      System.out.println(" MOVE v0 "+b+"\n");
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s=(String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      LinkedList<R> l=(LinkedList)n.f3.accept(this, argu);
      Iterator<R> iter=l.iterator();
      int[] sp={0},spnum={-1};String c;
      int ct=0;
      while(iter.hasNext()){
    	  
    	  sp[0]=0;spnum[0]=-1;
    	  c=getregister(Integer.parseInt((String)iter.next()),0,sp,spnum);
    	  if(ct<=3){
    		 
    			  System.out.println(" MOVE a"+ct+" "+c+"\n");
    		  }
    	  else
    	  {
    		  System.out.println(" PASSARG "+(ct-3)+" "+c+"\n");
    		  
    	  }
    	  ct++;
    	  
      }
      System.out.println(" CALL "+s+"\n");
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      _ret=n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op=(String)n.f0.accept(this, argu);
      String temp=(String)n.f1.accept(this, argu);
      
      String s=(String)n.f2.accept(this, argu);
      int[] sp={0},spnum={-1};
      String c=getregister(Integer.parseInt(temp),0,sp,spnum);
      sp[0]=0;spnum[0]=-1;
      String d=getregister((Integer)argu,-1,sp,spnum);
      if(sp[0]==1)
    	  System.out.println(" MOVE v0 "+op+" "+c+" "+s+"\n"+" ASTORE SPILLEDARG "+spnum[0]+" v0\n");
      else
    	  System.out.println(" MOVE "+d+" "+op+" "+c+" "+s+"\n");
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      String str="";
      n.f0.accept(this, argu);
      switch(n.f0.which){
      case 0:str=" LT ";break;
      case 1:str=" PLUS ";break;
      case 2:str=" MINUS ";break;
      case 3:str=" TIMES ";break;
      }
      
      return (R)str;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      if(n.f0.which==0){
    	  int[] sp={0},spnum={-1};
    	  return (R)getregister(Integer.parseInt((String)_ret),1,sp,spnum);
      }
      if(n.f0.which==1){
    	  System.out.println(" MOVE v1 "+(String)_ret+"\n");
    	  return (R)"v1";
      }
    	  return _ret;
   
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=n.f1.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)n.f0.toString();
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.toString();
   }

}
