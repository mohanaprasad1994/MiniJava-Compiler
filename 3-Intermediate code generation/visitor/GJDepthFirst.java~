//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {

    public class JustForPassing{
        HashMap <String,Table> GlobalTable;
        HashMap < String,newTable> newGlobalTable;
        };
     
   public class Table{
        HashMap<String,String> var;
        HashMap<String,LinkedList<R> > signature;
        HashMap<String,Table> method;
        String parent;
        };
    HashMap <String,Table> GlobalTable=new HashMap<String,Table>();
    public Table createTable(){
        Table a=new Table();
        a.var=new HashMap<String,String>();
        a.signature=new HashMap<String,LinkedList<R> >();
        a.method=new HashMap<String,Table>();
        a.parent=null;
        return a;
        }
        
   public class newTable{
        HashMap<String,Integer> var;
        HashMap<String,Integer> method;
        };
  HashMap < String,newTable> newGlobalTable=new HashMap < String,newTable>();
  
  
            
    
  
  int exists_method(String a, String m,newTable x){
        if(a==null)
            return -1;
        Table t=GlobalTable.get(a);
        if(t.method.get(m)==null)
            return exists_method(t.parent,m,x);
        else{
            int temp=x.method.get(a+"_"+m);
            x.method.remove(a+"_"+m);
            return temp;
        }
   }
    
  
  void fill_newTable(String a, newTable x){
        Table old=GlobalTable.get(a);
        if( old.parent!=null)
            fill_newTable(old.parent,x);
        Set<String> variables=old.var.keySet();
        int i= (x.var.size()+1)*4;
        for( String v: variables){
            x.var.put(a+"_"+v,i);
            i+=4;
            }
        Set<String> methods=old.method.keySet();
        i= x.method.size()*4;
        for(String m:methods){
            int t=exists_method(old.parent,m,x);
            if(t==-1){
                x.method.put(a+"_"+m,i);
                i+=4;
                }
            else
                x.method.put(a+"_"+m,t);
            }
      }
                
                
  
  void createNewTable(){
        Set<String> keys= GlobalTable.keySet();
        for(String a:keys){
            newTable x=new newTable();
            x.var=new HashMap<String,Integer> ();
            x.method=new HashMap<String,Integer>();
            fill_newTable(a,x);
            newGlobalTable.put(a,x);
            }
       }
        
    
         
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         LinkedList<R> l = new LinkedList<R>();
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            l.add(e.nextElement().accept(this,argu));
            _count++;
         }
         return (R) l;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      //System.out.println("HHHHHHHHHHHHHHHHHHHHHHH");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      createNewTable();
      Set<String> s= newGlobalTable.keySet();
      for(String a:s){
        Set<String> s2 = newGlobalTable.get(a).method.keySet();
            for(String b:s2)
                System.out.println(b+newGlobalTable.get(a).method.get(b));
            }
     // System.out.println(initialize("Element",1));
      JustForPassing p=new JustForPassing();
      p.GlobalTable=GlobalTable;
      p.newGlobalTable=newGlobalTable;
      return (R)p;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
        Table a=createTable();
        argu=(A)a;       
      R _ret=null;
      n.f0.accept(this, argu);
      String ClassName=(String) n.f1.accept(this, argu);
      GlobalTable.put(ClassName,a);
      argu=(A)a;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      String id=(String)n.f11.accept(this, argu);
      
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      String func=(String)"main";
      LinkedList<R> f=new LinkedList<R>();
      f.addFirst((R)((String)"String[]"));
      f.addFirst((R)((String)"void"));
      a.signature.put(func,f);
      Table b=createTable();
      b.var.put(id,"String[]");
      a.method.put("main",b);
      
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
    Table a=createTable();
        argu=(A)a;   
      R _ret=null;
      n.f0.accept(this, argu);
      String ClassName=(String)n.f1.accept(this, argu);
      if(GlobalTable.get(ClassName)!=null){
        System.out.println("Type error");//System.out.println("ERROR:Class Redeclared");
        System.exit(0);
        }
      GlobalTable.put(ClassName,a);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
   Table a=createTable();
        argu=(A)a; 
      R _ret=null;
      n.f0.accept(this, argu);
       String ClassName=(String)n.f1.accept(this, argu);
      if(GlobalTable.get(ClassName)!=null){
        System.out.println("Type error");//System.out.println("ERROR:Class Redeclared");
        System.exit(0);
        }
      GlobalTable.put(ClassName,a);
      n.f2.accept(this, argu);
      String Extends=(String)n.f3.accept(this, argu);
      
      a.parent=Extends;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
        Table a=(Table)argu;
        
      R _ret=null;
      String type=(String)n.f0.accept(this, argu);
      String id=(String)n.f1.accept(this, argu);
      if(a.var.get(id)!=null){
         System.out.println("Type error");//System.out.println("ERROR:Variable redeclared");
        System.exit(0);
        }
        a.var.put(id,type);
      n.f2.accept(this, argu);
       //System.out.println(a.var.get(id)+" "+id+" ");
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
    public boolean equal(LinkedList<R> a,LinkedList<R> b){
        if(a.size()==b.size()){
            int i,l=a.size();
            for(i=0;i<l;i++)
                if(!((String)a.get(i)).equals((String)b.get(i)))
                    return false;
            return true;
            }
            return false;
            }
   public R visit(MethodDeclaration n, A argu) {
      Table b=createTable();
      Set<String> Keys=GlobalTable.keySet();
     
    for (String a:Keys) {
       
      if(GlobalTable.get(a)==(Table)argu){
        b.parent=a;break;}
    }
     // b.parent=(Table)argu;
      
      R _ret=null;
      n.f0.accept(this, (A)b);
      String ret=(String)n.f1.accept(this, (A)b);
      String Methodname=(String)n.f2.accept(this, (A)b);
      n.f3.accept(this, (A)b);
      R fpl=n.f4.accept(this, (A)b);//get formal parameters
      if(fpl==null)
        fpl=(R)new LinkedList<R>();
      ((LinkedList<R>)fpl).addFirst((R)ret);
      //String sig=(ret+"("+(String)fpl+")");
      if(((Table)argu).signature.get(Methodname)!=null && equal(((Table)argu).signature.get(Methodname),(LinkedList<R>)fpl)){
        System.out.println("Type error");//System.out.println("ERROR:TWO functions with same name and different signature");
        System.exit(0);
        }
      ((Table)argu).signature.put(Methodname,(LinkedList<R>)fpl);
      ((Table)argu).method.put(Methodname,b);
      n.f5.accept(this, (A)b);
      n.f6.accept(this, (A)b);
      n.f7.accept(this, (A)b);
      n.f8.accept(this, (A)b);
      n.f9.accept(this, (A)b);
      n.f10.accept(this, (A)b);
      n.f11.accept(this, (A)b);
      n.f12.accept(this, (A)b);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
     R _ret=null;
      R fp = n.f0.accept(this, argu);
      R fpr = n.f1.accept(this, argu);
      
      if (fpr == null)
          fpr = (R) new LinkedList<R>();
      if (fp == null){
            //System.out.println("HELLO BOSS SOMETHING WRONG");
          return fpr;
          }
      
      LinkedList<R> l=(LinkedList<R>) fpr;
      l.addFirst(fp);
      /*ListIterator<R> i = l.listIterator();
      while (i.hasNext())
          System.out.println((String)i.next());*/
      return (R)l;
      
   }
   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      String id=(String)n.f1.accept(this, argu);
      if(((Table)argu).var.get(id)!=null){
        System.out.println("Type error");//System.out.println("ERROR:Variable redeclared");
        System.exit(0);
        }
      ((Table)argu).var.put(id,(String)_ret);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      if(n.f0.which==0)
        return (R)((String)"int[]");
      if(n.f0.which==1)
        return (R)((String)"boolean");
      if(n.f0.which==2)
        return (R)((String)"int");
      if(n.f0.which==3)
         return (_ret);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.toString();
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

}
