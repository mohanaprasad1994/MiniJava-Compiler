//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst2<R,A> extends GJDepthFirst<R,A> {

   int label;
   int i;
   HashMap <String,Integer> localvariable=new HashMap <String,Integer>();
   String class_name;
   String initialize(String a){
    newTable t=newGlobalTable.get(a);
    int s1=(t.var.size()+1)*4;
    int s2=(t.method.size())*4;
    String to_ret="BEGIN \n";
    to_ret+=("MOVE TEMP "+i+" HALLOCATE "+s1+"\n");
    i++;
    to_ret+=(" MOVE TEMP "+i+" HALLOCATE "+s2+"\n");
    Set<String> methods=t.method.keySet();
    for(String m:methods)
        if(!Pattern.matches(a+"_"+".*", m))
            to_ret+=(" HSTORE TEMP "+i+" "+t.method.get(m)+" "+m+" \n");
    for(String m:methods)
        if(Pattern.matches(a+"_"+".*", m))
            to_ret+=(" HSTORE TEMP "+i+" "+t.method.get(m)+" "+m+" \n");
   Set<String> vars=t.var.keySet();
   for(String v:vars)
       to_ret+=(" HSTORE TEMP "+(i-1)+" "+t.var.get(v)+" 0 \n");
   to_ret+=(" HSTORE TEMP "+(i-1)+" 0 TEMP "+i+" \n");
   to_ret+=(" RETURN TEMP "+(i-1)+ " \n END \n");
   i++;
   return to_ret;
   }
         
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         LinkedList<R> l = new LinkedList<R>();
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            l.add(e.nextElement().accept(this,argu));
            _count++;
         }
         return (R) l;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
        label=0;
      R _ret=null;
      JustForPassing p=(JustForPassing )argu;
      GlobalTable=p.GlobalTable;
      newGlobalTable=p.newGlobalTable;
      argu=null;
      //System.out.println(GlobalTable.get("Fac").var.get("a"));
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      //System.out.println("Program type checked successfully");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      System.out.println("MAIN \n");      
      R _ret=null;
      n.f0.accept(this, argu);
      String ClassName=(String) n.f1.accept(this, argu);
      class_name=ClassName;
      argu=(A)GlobalTable.get(ClassName);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      argu=(A)(((Table)argu).method.get("main"));
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      String id=(String)n.f11.accept(this, argu);
      
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      
      R _ret=null;
      n.f0.accept(this, argu);
      String ClassName=(String)n.f1.accept(this, argu);
      class_name=ClassName;
      argu=(A)GlobalTable.get(ClassName);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
    
      R _ret=null;
      n.f0.accept(this, argu);
       String ClassName=(String)n.f1.accept(this, argu);
       class_name=ClassName;
       Table a=GlobalTable.get(ClassName);
       /*if(GlobalTable.get(a.parent)==null){
                System.out.println("Type error");//System.out.println("ERROR:BASE CLASS doesn't exist");
                System.exit(0);}*/
       String x=a.parent;
      /* while(x!=null && GlobalTable.get(x)!=null){
            Table c=GlobalTable.get(x);
            if(c==a){
                System.out.println("Type error");//System.out.println("ERROR: circular inheritence");
                System.exit(0);
                }
            x=c.parent;
            }*/
      argu=(A)a;
     
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
    
      
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
               
      R _ret=null;
     n.f0.accept(this, argu);
     _ret=n.f1.accept(this, argu);
     localvariable.put((String)_ret,i++);
     n.f2.accept(this, argu);
     
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
    
   public R visit(MethodDeclaration n, A argu) {
      
      R _ret=null;
      n.f0.accept(this, (A)null);
      n.f1.accept(this, (A)null);
      String funcName=(String)n.f2.accept(this, (A)null);
      String classname=null;
       Table b=((Table)argu).method.get(funcName);
      Set<String> classnames=GlobalTable.keySet();
      for(String s: classnames)
        if(GlobalTable.get(s)==argu){
            classname=s;
           /* if(funcName.equals(s)){
                System.out.println("Type error");//System.out.println("ERROR:Method and class have same name");
                System.exit(0);
                }*/
           }
      Table t=(Table)argu;
      LinkedList<R> mine=t.signature.get(funcName);
      String x=((Table)argu).parent;
      
     /* while(x!=null && GlobalTable.get(x)!=null){
        t=GlobalTable.get(x);
        LinkedList<R> summa=t.signature.get(funcName);
        if(summa!= null){
            //System.out.println(mine.size());
            //System.out.println(summa.size());
            if( summa.size()!=mine.size()){
                System.out.println("Type error");//System.out.println("ERROR: Function overloading");
                System.exit(0);
                }
            int l=summa.size(),j;
            for(j=1;j<l;j++){
            
                if(!((String)summa.get(j)).equals((String)mine.get(j))){
                    
                    System.out.println("Type error");//System.out.println("ERROR: Function overloading");
                    System.exit(0);
                }
            }
            if(!Assignable((String)summa.get(0),(String)mine.get(0))){
                System.out.println("Type error");//System.out.println("ERROR: Function overloading2");
                    System.exit(0);
                }
          }
          x=t.parent;
          }*/
      i=1;
      localvariable=new HashMap<String,Integer>();
      
        
      n.f3.accept(this, (A)b);
      LinkedList<R> fpl=(LinkedList<R>)n.f4.accept(this, (A)b);//get formal parameters
      if(fpl==null)
        fpl=new LinkedList<R>();
      int l=fpl.size(),j;
      //////System.out.println(newGlobalTable.get(classname
      for(j=0;j<l;j++){
            localvariable.put((String)fpl.get(j),i);
            //System.out.println((String)fpl.get(j));
            i++;
            }
      System.out.println(classname+"_"+funcName+" ["+(l+1)+"] \n");
      System.out.println(" BEGIN \n");
        
      n.f5.accept(this, (A)b);
      n.f6.accept(this, (A)b);
      n.f7.accept(this, (A)b);
      n.f8.accept(this, (A)b);
      n.f9.accept(this, (A)b);
      System.out.println(" RETURN ");
      n.f10.accept(this, (A)b);
      n.f11.accept(this, (A)b);
      n.f12.accept(this, (A)b);
      System.out.println(" END \n");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
     R _ret=null;
      R fp = n.f0.accept(this, argu);
      R fpr = n.f1.accept(this, argu);
      
      if (fpr == null)
          fpr = (R) new LinkedList<R>();
      if (fp == null){
            //System.out.println("HELLO BOSS SOMETHING WRONG");
          return fpr;
          }
      
      LinkedList<R> l=(LinkedList<R>) fpr;
      l.addFirst(fp);
      /*ListIterator<R> i = l.listIterator();
      while (i.hasNext())
          System.out.println((String)i.next());*/
      return (R)l;
      
   }
   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      String id=(String)n.f1.accept(this, argu);
      
      return (R)id;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      int Flag=0;
      _ret=n.f0.accept(this, argu);
      if(n.f0.which==3){
            Set<String> classnames=GlobalTable.keySet();
            for(String s:classnames)
                if(((String)_ret).equals(s))
                    Flag=1;
            /*if(Flag==0){
                System.out.println("Type error");//System.out.println("ERROR: Such a Class doesn't exist");
                System.exit(0);
                }*/
        }
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }
   
   public String typeIdentifier(String id, Table a){
    if(a==null){
        
        System.out.println("Type error1");//System.out.println("ERROR:Variable Undeclared "+id);
        System.exit(0);
        }
    if(a.var.get(id)!=null)
        return a.var.get(id);
        
    return typeIdentifier(id,GlobalTable.get(a.parent));
    }
    
    
    public boolean Assignable(String a,String b){
        if(a.equals(b))
            return true;
        Table x=GlobalTable.get(b);
        while(x!=null){
            if(a.equals(x.parent))
                return true;
            x=GlobalTable.get(x.parent);
            }
        return false;
        }
        

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      //R _ret=null;
      String _ret=(String)n.f0.accept(this, argu);
      if(localvariable.get((String)_ret)!=null)
            System.out.println("MOVE TEMP "+localvariable.get((String)_ret)+" ");
        else{
            //System.out.println(_ret);
            
                int offset=get_offset_for_var(class_name,_ret);
            System.out.println(" HSTORE TEMP 0 "+offset+" ");
            }
      n.f1.accept(this, argu);
      String expr=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      /*if(!Assignable(typeIdentifier(id,(Table)argu),expr)){
        System.out.println("Type error");//System.out.println("ERROR:Cannot assign");
        System.exit(0);
        }*/
      return (R)_ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    begin temp temp
    hload temp3 plus temp1 plus times temp2 4 4 0
    temp1 temp2
    Hstore temp3
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      
      _ret=n.f0.accept(this, argu);
      if(localvariable.get((String)_ret)!=null){
            
            
            int i1=i++;
            System.out.println("MOVE TEMP "+i1 +" PLUS TEMP "+localvariable.get((String)_ret)+" PLUS 4 TIMES 4 ");
            int i2=i++;int i3=i++;int l1=label++;int l2=label++;
           
            n.f1.accept(this, argu);
      String expr=(String)n.f2.accept(this, argu);
       System.out.println(" CJUMP TIMES LT TEMP "+localvariable.get((String)_ret)+" TEMP "+i1+" LT TEMP "+i1+" BEGIN HLOAD TEMP "+i2+" TEMP "+localvariable.get((String)_ret)+" 0 \n");
       System.out.println(" MOVE TEMP "+i3 +" PLUS TEMP "+localvariable.get((String)_ret)+" PLUS 4 TIMES 4 TEMP "+i2+"  RETURN TEMP "+i3+" END L"+l1+" \n");
      n.f3.accept(this, argu);
      System.out.println(" HSTORE TEMP "+i1+" 0 ");
      n.f4.accept(this, argu);
      String expr2=(String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      System.out.println(" JUMP L"+l2+"\n L"+l1+" NOOP \n ERROR \n L"+l2+" NOOP\n");
      /*if(!(typeIdentifier(id,(Table)argu).equals("int[]") && expr.equals("int") && expr2.equals("int"))){
        System.out.println("Type error");//System.out.println("ERROR:Wrong Assignment");
        System.exit(0);
        }*/
      return _ret;
      }
        else{
        
        
     
        
            //System.out.println(_ret);
                int i1=i++;
                int offset=get_offset_for_var(class_name,(String)_ret);
            System.out.println(" HLOAD TEMP "+i1+" TEMP 0 "+offset+" \n");
            int i2=i++;
            System.out.println(" MOVE TEMP "+i2+" ");
            
      
      n.f1.accept(this, argu);
      String expr=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      int i3=i++;int l1=label++;int l2=label++;
      System.out.println(" CJUMP TIMES LT MINUS 0 1 TEMP "+i2+" LT TEMP "+i2+" BEGIN HLOAD TEMP "+i3+" TEMP "+i1+" 0   RETURN TEMP "+i3+" END L"+l1+" \n");
      System.out.println(" HSTORE PLUS TEMP "+i1+" PLUS 4 TIMES 4 TEMP "+i2+" 0 ");
      n.f4.accept(this, argu);
      String expr2=(String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      System.out.println("JUMP L"+l2+"\n L"+l1+" NOOP \n ERROR \n L"+l2+" NOOP\n");
      /*if(!(typeIdentifier(id,(Table)argu).equals("int[]") && expr.equals("int") && expr2.equals("int"))){
        System.out.println("Type error");//System.out.println("ERROR:Wrong Assignment");
        System.exit(0);
        }*/
      return _ret;
      }
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println(" CJUMP ");
      String a=(String)n.f2.accept(this, argu);
      System.out.println(" L"+label +" NOOP\n");
      int l1=label++;
      /*if(!a.equals("boolean")){
        System.out.println("Type error");//System.out.println("ERROR:Expected Boolean");
        System.exit(0);
        }*/
      int l2=label++;
      n.f3.accept(this, argu);
      
      n.f4.accept(this, argu);
      System.out.println(" JUMP L"+l2+" \n L"+l1+" NOOP \n");
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      System.out.println(" L"+l2+" NOOP \n");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      System.out.println(" L"+label+" NOOP \n CJUMP ");
      int l1=label++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String a=(String)n.f2.accept(this, argu);
      /*if(!a.equals("boolean")){
        System.out.println("Type error");//System.out.println("ERROR:Expected Boolean");
        System.exit(0);
        }*/
      System.out.println(" L"+label+"\n");
      int l2=label++;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println(" JUMP L"+l1+" \n");
      System.out.println(" L"+l2+" NOOP \n");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
            System.out.println(" PRINT ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String a=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      /*if(!a.equals("int")){
        System.out.println("Type error");//System.out.println("ERROR:print expects int");
        System.exit(0);
        }*/
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
            System.out.println(" TIMES ");
      String a = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String b = (String)n.f2.accept(this, argu);
      /*if(!(a.equals("boolean") && b.equals("boolean"))){
        System.out.println("Type error");//System.out.println("ERROR:expected boolean");
        System.exit(0);
        }*/
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
            System.out.println(" LT ");
      String a= (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String b= (String)n.f2.accept(this, argu);
     /* if(!(a.equals("int") && b.equals("int"))){
        System.out.println("Type error");//System.out.println("ERROR:expected int");
        System.exit(0);
        }*/
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
            System.out.println(" PLUS ");
      String a= (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String b= (String)n.f2.accept(this, argu);
      /*if(!(a.equals("int") && b.equals("int"))){
        System.out.println("Type error");//System.out.println("ERROR:expected int");
        System.exit(0);
        }*/
      return (R)"int";
   }
   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      System.out.println(" MINUS ");
      String a= (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String b= (String)n.f2.accept(this, argu);
      /*if(!(a.equals("int") && b.equals("int"))){
        System.out.println("Type error");//System.out.println("ERROR:expected int");
        System.exit(0);
        }*/
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      System.out.println(" TIMES ");
      String a= (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String b= (String)n.f2.accept(this, argu);
      /*if(!(a.equals("int") && b.equals("int"))){
        System.out.println("Type error");//System.out.println("ERROR:expected int");
        System.exit(0);
        }*/
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    begin temp temp
    hload temp3 plus temp1 plus times temp2 4 4 0
    
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      int i1=i++;
      System.out.println(" BEGIN MOVE TEMP "+i1+" ");
      
      String a=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      int i2=i++;
      System.out.println(" \n MOVE TEMP "+i2+" ");
      
      int i3=i++;
      int i4=i++;
      int l1=label++;int l2=label++;
      String b= (String)n.f2.accept(this, argu);
      System.out.println(" CJUMP TIMES LT MINUS 0 1 TEMP "+i2+" LT TEMP "+i2+" BEGIN HLOAD TEMP "+i4+" TEMP "+i1+" 0   RETURN TEMP "+i4+" END L"+l1+" \n");
      System.out.println(" HLOAD TEMP "+i3+" PLUS TEMP "+i1+" PLUS TIMES TEMP "+i2+" 4 4 0 \n JUMP L"+l2+" \n");
      System.out.println(" L"+l1+" NOOP \n ERROR \n L"+l2+" NOOP\n");
      System.out.println(" RETURN TEMP "+i3+" END \n"); 
      
      n.f3.accept(this, argu);
      /*if(!(a.equals("int[]") && b.equals("int"))){
        System.out.println("Type error");//System.out.println("ERROR:expected int[] and int");
        System.exit(0);
        }*/
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
    int i1=i++;
    System.out.println(" BEGIN \n MOVE TEMP "+ i1 + " ");
    
      R _ret=null;
      String a=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println(" HLOAD TEMP "+ i++ +"TEMP "+ (i1)+ " 0 ");
      System.out.println(" RETURN TEMP "+(i-1)+ " END \n"); 
      /*if(!a.equals("int[]")){
        System.out.println("Type error");//System.out.println("ERROR:expected int[]");
        System.exit(0);
        }*/
      return (R)"int";
   }

public String returntypemethod(String a,LinkedList<R> params,Table b){
    //System.out.println(a+" ");
    if(b==null){
        System.out.println("Type error2");//System.out.println("ERROR: Such a Function doesn't exist1");
        System.exit(0);
        }
   
    if(b.signature.get(a)==null){
        if(b.parent==null){
             System.out.println("Type error3");//System.out.println("ERROR: Such a Function doesn't exist2");
        System.exit(0);
        }
        return returntypemethod(a,params,GlobalTable.get(b.parent));
      }
       LinkedList<R> l=b.signature.get(a);
      int i=1,len=l.size();
      if(params==null && len!=1){
        System.out.println("Type error4");//System.out.println("ERROR: Such a Function doesn't exist. params don't match1");
        System.exit(0);
        }
      if(params==null)
        return (String)l.get(0);
      if(len!=params.size()+1){
        System.out.println("Type error5");//System.out.println("ERROR: Such a Function doesn't exist. params don't match2");
        System.exit(0);
        }
      while(i<len){
        if(!Assignable((String)l.get(i),(String)params.get(i-1))){
            System.out.println("Type error6");//System.out.println("ERROR: Such a Function doesn't exist. params don't match3");
        System.exit(0);
        }
        i++;
        }
        
    return (String)l.get(0);
    }
   
   
   int get_offset_for_method(String classname, String var){
        //System.out.println(var);
        if(classname==null)
            System.out.println("ERROR!!!");
        Table a=GlobalTable.get(classname);
        if(a.method.get(var)!=null)
            {
                newTable t=newGlobalTable.get(classname);
                return t.method.get(classname+"_"+var);
             }
        return get_offset_for_method(a.parent,var);
        } 
    
   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      System.out.println(" CALL \n BEGIN MOVE TEMP "+ i++ +" \n");
      int i1=i-1;   
      String classname=(String)n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      String methodname=(String)n.f2.accept(this, argu);
      int offset=get_offset_for_method(classname,methodname);
      int i2=i++;int i3=i++;
      System.out.println("HLOAD TEMP "+i2+" TEMP "+i1+" 0 \n HLOAD TEMP "+i3+" TEMP "+i2+" "+offset+"\n"); 
      System.out.println(" RETURN TEMP "+ i3 +" END \n ( TEMP "+i1+" ");
      n.f3.accept(this, argu);
      LinkedList<R> params=(LinkedList<R>)n.f4.accept(this, argu);
      //System.out.println(methodname+ " "+params.size());
      n.f5.accept(this, argu);
      System.out.println(")\n");
      /*if(GlobalTable.get(classname)==null){
        System.out.println("Type error");//System.out.println("ERROR: Such a class doesn't exist");
        System.exit(0);
        }*/
      
      return (R)returntypemethod(methodname,params,GlobalTable.get(classname));
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
     R fp = n.f0.accept(this, argu);
      R fpr = n.f1.accept(this, argu);
      
      if (fpr == null)
          fpr = (R) new LinkedList<R>();
      if (fp == null)
          return fpr;
      ((LinkedList<R>) fpr).addFirst(fp);
      return (R)fpr;
      }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
    
    int get_offset_for_var(String classname, String var){
        //System.out.println(var);
        if(classname==null)
            System.out.println("ERROR");
        Table a=GlobalTable.get(classname);
        if(a.var.get(var)!=null)
            {
                newTable t=newGlobalTable.get(classname);
                return t.var.get(classname+"_"+var);
             }
        return get_offset_for_var(a.parent,var);
        }
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      A ag=argu;
      
      _ret=n.f0.accept(this, argu);
      if(n.f0.which==3){
            if(localvariable.get((String)_ret)!=null)
                System.out.println(" TEMP "+localvariable.get((String)_ret)+" ");
            else{
                //System.out.println(class_name);
                int offset=get_offset_for_var(class_name,(String)_ret);
                System.out.println("BEGIN \n HLOAD TEMP "+ i++ +" TEMP 0 "+offset+" \n RETURN TEMP "+(i-1)+" END \n ");
                }
            return (R)typeIdentifier((String)_ret,(Table)argu);
            }
        
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      System.out.println(n.f0.toString());
      return (R)"int";
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      System.out.println(" 1 ");
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      System.out.println(" 0 ");
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.toString();
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      System.out.println(" TEMP 0 ");
      n.f0.accept(this, argu);
      Set<String> classnames=GlobalTable.keySet();
      for (String s: classnames){
        if(GlobalTable.get(s)==(Table)argu)
            return (R)s;
        Table t=GlobalTable.get(s);
        Set<String> methodnames=t.method.keySet();
        for(String b: methodnames)
            if(t.method.get(b)==(Table)argu)
                return (R)s;
         }
     // System.out.println("Type error");//System.out.println("ERROR with this");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */ 
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      System.out.println("BEGIN \n MOVE TEMP "+i+" \n ");
      int i1=i++;
      int i2=i++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String a=(String)n.f3.accept(this, argu);
      System.out.println(" MOVE TEMP "+i2+" HALLOCATE PLUS TIMES TEMP "+i1+" 4 4 \n");
      
      System.out.println("HSTORE TEMP "+i2+" 0 TEMP "+i1+" \n");
       int l1=label++;
       int i3=i++;
       int l2=label++;
       System.out.println(" MOVE TEMP "+i3+" 4 \n");
      System.out.println(" L"+l1+" \n CJUMP LT TEMP "+i3+" PLUS TIMES TEMP "+i1+" 4 4 L"+l2);
      
      System.out.println(" \n HSTORE PLUS TEMP "+i2+" TEMP "+i3+"   0 0 \n MOVE TEMP "+i3+" PLUS TEMP "+i3+" 4 \n");
       System.out.println(" JUMP L"+l1+"\n L"+l2+" NOOP \n");  
      System.out.println("RETURN TEMP "+i2+" END \n ");
      
      n.f4.accept(this, argu);
     /* if(!a.equals("int")){
        System.out.println("Type error");//System.out.println("ERROR:Expecting int in new int[expr]");
        System.exit(0);
        }*/
      return (R)"int[]";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      System.out.println("BEGIN \n MOVE TEMP "+i+" \n ");
      int temp=i;
      i++;
      n.f0.accept(this, argu);
      String id=(String)n.f1.accept(this, argu);
      System.out.println(initialize(id)+"RETURN TEMP "+temp+"  END\n ");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
     /* if(GlobalTable.get(id)==null){
        System.out.println("Type error");//System.out.println("ERROR:invalid new class");
        System.exit(0);
        }*/
      return (R)id;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" MINUS 1 ");
      String a=(String)n.f1.accept(this, argu);
      /*if(!a.equals("boolean")){
        System.out.println("Type error");//System.out.println("ERROR: Expected boolean");
        System.exit(0);
        }*/
      return (R)"boolean";
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

}
