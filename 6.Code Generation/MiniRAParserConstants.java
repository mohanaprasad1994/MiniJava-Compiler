/* Generated By:JavaCC: Do not edit this line. MiniRAParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MiniRAParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int LPAREN = 8;
  /** RegularExpression Id. */
  int RPAREN = 9;
  /** RegularExpression Id. */
  int LBRACE = 10;
  /** RegularExpression Id. */
  int RBRACE = 11;
  /** RegularExpression Id. */
  int LSQPAREN = 12;
  /** RegularExpression Id. */
  int RSQPAREN = 13;
  /** RegularExpression Id. */
  int DOT = 14;
  /** RegularExpression Id. */
  int LT = 15;
  /** RegularExpression Id. */
  int LE = 16;
  /** RegularExpression Id. */
  int GT = 17;
  /** RegularExpression Id. */
  int GE = 18;
  /** RegularExpression Id. */
  int NE = 19;
  /** RegularExpression Id. */
  int EQ = 20;
  /** RegularExpression Id. */
  int PLUS = 21;
  /** RegularExpression Id. */
  int MINUS = 22;
  /** RegularExpression Id. */
  int AND = 23;
  /** RegularExpression Id. */
  int OR = 24;
  /** RegularExpression Id. */
  int NOT = 25;
  /** RegularExpression Id. */
  int BITOR = 26;
  /** RegularExpression Id. */
  int BITAND = 27;
  /** RegularExpression Id. */
  int BITXOR = 28;
  /** RegularExpression Id. */
  int LSHIFT = 29;
  /** RegularExpression Id. */
  int RSHIFT = 30;
  /** RegularExpression Id. */
  int TIMES = 31;
  /** RegularExpression Id. */
  int MAIN = 32;
  /** RegularExpression Id. */
  int CODE = 33;
  /** RegularExpression Id. */
  int HALLOCATE = 34;
  /** RegularExpression Id. */
  int SPILLEDARG = 35;
  /** RegularExpression Id. */
  int END = 36;
  /** RegularExpression Id. */
  int NOOP = 37;
  /** RegularExpression Id. */
  int MOVE = 38;
  /** RegularExpression Id. */
  int CALL = 39;
  /** RegularExpression Id. */
  int ERROR = 40;
  /** RegularExpression Id. */
  int PRINT = 41;
  /** RegularExpression Id. */
  int BEGIN = 42;
  /** RegularExpression Id. */
  int RETURN = 43;
  /** RegularExpression Id. */
  int JUMP = 44;
  /** RegularExpression Id. */
  int CJUMP = 45;
  /** RegularExpression Id. */
  int HSTORE = 46;
  /** RegularExpression Id. */
  int HLOAD = 47;
  /** RegularExpression Id. */
  int ALOAD = 48;
  /** RegularExpression Id. */
  int ASTORE = 49;
  /** RegularExpression Id. */
  int PASSARG = 50;
  /** RegularExpression Id. */
  int MEM = 51;
  /** RegularExpression Id. */
  int TEMP = 52;
  /** RegularExpression Id. */
  int ARG = 53;
  /** RegularExpression Id. */
  int ZERO = 54;
  /** RegularExpression Id. */
  int at = 55;
  /** RegularExpression Id. */
  int v0 = 56;
  /** RegularExpression Id. */
  int v1 = 57;
  /** RegularExpression Id. */
  int a0 = 58;
  /** RegularExpression Id. */
  int a1 = 59;
  /** RegularExpression Id. */
  int a2 = 60;
  /** RegularExpression Id. */
  int a3 = 61;
  /** RegularExpression Id. */
  int t0 = 62;
  /** RegularExpression Id. */
  int t1 = 63;
  /** RegularExpression Id. */
  int t2 = 64;
  /** RegularExpression Id. */
  int t3 = 65;
  /** RegularExpression Id. */
  int t4 = 66;
  /** RegularExpression Id. */
  int t5 = 67;
  /** RegularExpression Id. */
  int t6 = 68;
  /** RegularExpression Id. */
  int t7 = 69;
  /** RegularExpression Id. */
  int s0 = 70;
  /** RegularExpression Id. */
  int s1 = 71;
  /** RegularExpression Id. */
  int s2 = 72;
  /** RegularExpression Id. */
  int s3 = 73;
  /** RegularExpression Id. */
  int s4 = 74;
  /** RegularExpression Id. */
  int s5 = 75;
  /** RegularExpression Id. */
  int s6 = 76;
  /** RegularExpression Id. */
  int s7 = 77;
  /** RegularExpression Id. */
  int t8 = 78;
  /** RegularExpression Id. */
  int t9 = 79;
  /** RegularExpression Id. */
  int k0 = 80;
  /** RegularExpression Id. */
  int k1 = 81;
  /** RegularExpression Id. */
  int gp = 82;
  /** RegularExpression Id. */
  int sp = 83;
  /** RegularExpression Id. */
  int fp = 84;
  /** RegularExpression Id. */
  int ra = 85;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 86;
  /** RegularExpression Id. */
  int IDENTIFIER = 87;
  /** RegularExpression Id. */
  int LETTER = 88;
  /** RegularExpression Id. */
  int DIGIT = 89;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\"LT\"",
    "\"LE\"",
    "\"GT\"",
    "\"GE\"",
    "\"NE\"",
    "\"EQ\"",
    "\"PLUS\"",
    "\"MINUS\"",
    "\"AND\"",
    "\"OR\"",
    "\"NOT\"",
    "\"BITOR\"",
    "\"BITAND\"",
    "\"BITXOR\"",
    "\"LSHIFT\"",
    "\"RSHIFT\"",
    "\"TIMES\"",
    "\"MAIN\"",
    "\"CODE\"",
    "\"HALLOCATE\"",
    "\"SPILLEDARG\"",
    "\"END\"",
    "\"NOOP\"",
    "\"MOVE\"",
    "\"CALL\"",
    "\"ERROR\"",
    "\"PRINT\"",
    "\"BEGIN\"",
    "\"RETURN\"",
    "\"JUMP\"",
    "\"CJUMP\"",
    "\"HSTORE\"",
    "\"HLOAD\"",
    "\"ALOAD\"",
    "\"ASTORE\"",
    "\"PASSARG\"",
    "\"MEM\"",
    "\"TEMP\"",
    "\"ARG\"",
    "\"zero\"",
    "\"at\"",
    "\"v0\"",
    "\"v1\"",
    "\"a0\"",
    "\"a1\"",
    "\"a2\"",
    "\"a3\"",
    "\"t0\"",
    "\"t1\"",
    "\"t2\"",
    "\"t3\"",
    "\"t4\"",
    "\"t5\"",
    "\"t6\"",
    "\"t7\"",
    "\"s0\"",
    "\"s1\"",
    "\"s2\"",
    "\"s3\"",
    "\"s4\"",
    "\"s5\"",
    "\"s6\"",
    "\"s7\"",
    "\"t8\"",
    "\"t9\"",
    "\"k0\"",
    "\"k1\"",
    "\"gp\"",
    "\"sp\"",
    "\"fp\"",
    "\"ra\"",
    "<INTEGER_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"// Number of  vars after packing =\"",
    "\"; Number of Spilled vars =\"",
  };

}
