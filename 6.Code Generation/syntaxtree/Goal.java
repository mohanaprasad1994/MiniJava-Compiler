//
// Generated by JTB 1.3.2
//

package syntaxtree;

/**
 * Grammar production:
 * f0 -> "MAIN"
 * f1 -> "["
 * f2 -> IntegerLiteral()
 * f3 -> "]"
 * f4 -> "["
 * f5 -> IntegerLiteral()
 * f6 -> "]"
 * f7 -> "["
 * f8 -> IntegerLiteral()
 * f9 -> "]"
 * f10 -> StmtList()
 * f11 -> "END"
 * f12 -> ( Procedure() )*
 * f13 -> VariablePackingInfo()
 * f14 -> <EOF>
 */
public class Goal implements Node {
   public NodeToken f0;
   public NodeToken f1;
   public IntegerLiteral f2;
   public NodeToken f3;
   public NodeToken f4;
   public IntegerLiteral f5;
   public NodeToken f6;
   public NodeToken f7;
   public IntegerLiteral f8;
   public NodeToken f9;
   public StmtList f10;
   public NodeToken f11;
   public NodeListOptional f12;
   public VariablePackingInfo f13;
   public NodeToken f14;

   public Goal(NodeToken n0, NodeToken n1, IntegerLiteral n2, NodeToken n3, NodeToken n4, IntegerLiteral n5, NodeToken n6, NodeToken n7, IntegerLiteral n8, NodeToken n9, StmtList n10, NodeToken n11, NodeListOptional n12, VariablePackingInfo n13, NodeToken n14) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
      f9 = n9;
      f10 = n10;
      f11 = n11;
      f12 = n12;
      f13 = n13;
      f14 = n14;
   }

   public Goal(IntegerLiteral n0, IntegerLiteral n1, IntegerLiteral n2, StmtList n3, NodeListOptional n4, VariablePackingInfo n5) {
      f0 = new NodeToken("MAIN");
      f1 = new NodeToken("[");
      f2 = n0;
      f3 = new NodeToken("]");
      f4 = new NodeToken("[");
      f5 = n1;
      f6 = new NodeToken("]");
      f7 = new NodeToken("[");
      f8 = n2;
      f9 = new NodeToken("]");
      f10 = n3;
      f11 = new NodeToken("END");
      f12 = n4;
      f13 = n5;
      f14 = new NodeToken("");
   }

   public void accept(visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

