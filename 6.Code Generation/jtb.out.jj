//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniRAParser)
import syntaxtree.*;
import java.util.Vector;


public class MiniRAParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(MiniRAParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <LSQPAREN: "[">
   | <RSQPAREN: "]">
   | <DOT: ".">
   | <LT: "LT">
   | <LE: "LE">
   | <GT: "GT">
   | <GE: "GE">
   | <NE: "NE">
   | <EQ: "EQ">
   | <PLUS: "PLUS">
   | <MINUS: "MINUS">
   | <AND: "AND">
   | <OR: "OR">
   | <NOT: "NOT">
   | <BITOR: "BITOR">
   | <BITAND: "BITAND">
   | <BITXOR: "BITXOR">
   | <LSHIFT: "LSHIFT">
   | <RSHIFT: "RSHIFT">
   | <TIMES: "TIMES">
   | <MAIN: "MAIN">
   | <CODE: "CODE">
   | <HALLOCATE: "HALLOCATE">
   | <SPILLEDARG: "SPILLEDARG">
   | <END: "END">
   | <NOOP: "NOOP">
   | <MOVE: "MOVE">
   | <CALL: "CALL">
   | <ERROR: "ERROR">
   | <PRINT: "PRINT">
   | <BEGIN: "BEGIN">
   | <RETURN: "RETURN">
   | <JUMP: "JUMP">
   | <CJUMP: "CJUMP">
   | <HSTORE: "HSTORE">
   | <HLOAD: "HLOAD">
   | <ALOAD: "ALOAD">
   | <ASTORE: "ASTORE">
   | <PASSARG: "PASSARG">
   | <MEM: "MEM">
   | <TEMP: "TEMP">
   | <ARG: "ARG">
   | <ZERO: "zero">
   | <at: "at">
   | <v0: "v0">
   | <v1: "v1">
   | <a0: "a0">
   | <a1: "a1">
   | <a2: "a2">
   | <a3: "a3">
   | <t0: "t0">
   | <t1: "t1">
   | <t2: "t2">
   | <t3: "t3">
   | <t4: "t4">
   | <t5: "t5">
   | <t6: "t6">
   | <t7: "t7">
   | <s0: "s0">
   | <s1: "s1">
   | <s2: "s2">
   | <s3: "s3">
   | <s4: "s4">
   | <s5: "s5">
   | <s6: "s6">
   | <s7: "s7">
   | <t8: "t8">
   | <t9: "t9">
   | <k0: "k0">
   | <k1: "k1">
   | <gp: "gp">
   | <sp: "sp">
   | <fp: "fp">
   | <ra: "ra">
}

TOKEN :
{
   <INTEGER_LITERAL: (["1"-"9"] (["0"-"9"])* | "0")>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Goal Goal() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   IntegerLiteral n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   IntegerLiteral n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   IntegerLiteral n14;
   NodeToken n15;
   Token n16;
   StmtList n17;
   NodeToken n18;
   Token n19;
   NodeListOptional n20 = new NodeListOptional();
   Procedure n21;
   VariablePackingInfo n22;
   NodeToken n23;
   Token n24;

   
}
{
   n1="MAIN" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="[" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=IntegerLiteral()
   n6="]" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="[" { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=IntegerLiteral()
   n11="]" { n10 = JTBToolkit.makeNodeToken(n11); }
   n13="[" { n12 = JTBToolkit.makeNodeToken(n13); }
   n14=IntegerLiteral()
   n16="]" { n15 = JTBToolkit.makeNodeToken(n16); }
   n17=StmtList()
   n19="END" { n18 = JTBToolkit.makeNodeToken(n19); }
   (
      n21=Procedure()
      { n20.addNode(n21); }
   )*
   { n20.nodes.trimToSize(); }
   n22=VariablePackingInfo()
   n24=<EOF> { 
      n24.beginColumn++; n24.endColumn++;
      n23 = JTBToolkit.makeNodeToken(n24);
   }
   
   { return new Goal(n0,n2,n4,n5,n7,n9,n10,n12,n14,n15,n17,n18,n20,n22,n23); }
}

StmtList StmtList() :
{
   NodeListOptional n0 = new NodeListOptional();
   NodeSequence n1;
   NodeOptional n2;
   Label n3;
   Stmt n4;

   
}
{
   (
      { n2 = new NodeOptional(); }
      { n1 = new NodeSequence(2); }
      (
         n3=Label()
         { n2.addNode(n3); }
      )?
      { n1.addNode(n2); }
      n4=Stmt()
      { n1.addNode(n4); }
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new StmtList(n0); }
}

Procedure Procedure() :
{
   Label n0;
   NodeToken n1;
   Token n2;
   IntegerLiteral n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   IntegerLiteral n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   IntegerLiteral n13;
   NodeToken n14;
   Token n15;
   StmtList n16;
   NodeToken n17;
   Token n18;

   
}
{
   n0=Label()
   n2="[" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=IntegerLiteral()
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   n7="[" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=IntegerLiteral()
   n10="]" { n9 = JTBToolkit.makeNodeToken(n10); }
   n12="[" { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=IntegerLiteral()
   n15="]" { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=StmtList()
   n18="END" { n17 = JTBToolkit.makeNodeToken(n18); }
   
   { return new Procedure(n0,n1,n3,n4,n6,n8,n9,n11,n13,n14,n16,n17); }
}

Stmt Stmt() :
{
   NodeChoice n0;
   NoOpStmt n1;
   ErrorStmt n2;
   CJumpStmt n3;
   JumpStmt n4;
   HStoreStmt n5;
   HLoadStmt n6;
   MoveStmt n7;
   PrintStmt n8;
   ALoadStmt n9;
   AStoreStmt n10;
   PassArgStmt n11;
   CallStmt n12;

   
}
{
   (
      n1=NoOpStmt()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ErrorStmt()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=CJumpStmt()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=JumpStmt()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=HStoreStmt()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=HLoadStmt()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=MoveStmt()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=PrintStmt()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=ALoadStmt()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=AStoreStmt()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=PassArgStmt()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=CallStmt()
      { n0 = new NodeChoice(n12, 11); }
   )
   
   { return new Stmt(n0); }
}

NoOpStmt NoOpStmt() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="NOOP" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new NoOpStmt(n0); }
}

ErrorStmt ErrorStmt() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="ERROR" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ErrorStmt(n0); }
}

CJumpStmt CJumpStmt() :
{
   NodeToken n0;
   Token n1;
   Reg n2;
   Label n3;

   
}
{
   n1="CJUMP" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Reg()
   n3=Label()
   
   { return new CJumpStmt(n0,n2,n3); }
}

JumpStmt JumpStmt() :
{
   NodeToken n0;
   Token n1;
   Label n2;

   
}
{
   n1="JUMP" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Label()
   
   { return new JumpStmt(n0,n2); }
}

HStoreStmt HStoreStmt() :
{
   NodeToken n0;
   Token n1;
   Reg n2;
   IntegerLiteral n3;
   Reg n4;

   
}
{
   n1="HSTORE" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Reg()
   n3=IntegerLiteral()
   n4=Reg()
   
   { return new HStoreStmt(n0,n2,n3,n4); }
}

HLoadStmt HLoadStmt() :
{
   NodeToken n0;
   Token n1;
   Reg n2;
   Reg n3;
   IntegerLiteral n4;

   
}
{
   n1="HLOAD" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Reg()
   n3=Reg()
   n4=IntegerLiteral()
   
   { return new HLoadStmt(n0,n2,n3,n4); }
}

MoveStmt MoveStmt() :
{
   NodeToken n0;
   Token n1;
   Reg n2;
   Exp n3;

   
}
{
   n1="MOVE" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Reg()
   n3=Exp()
   
   { return new MoveStmt(n0,n2,n3); }
}

PrintStmt PrintStmt() :
{
   NodeToken n0;
   Token n1;
   SimpleExp n2;

   
}
{
   n1="PRINT" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SimpleExp()
   
   { return new PrintStmt(n0,n2); }
}

ALoadStmt ALoadStmt() :
{
   NodeToken n0;
   Token n1;
   Reg n2;
   SpilledArg n3;

   
}
{
   n1="ALOAD" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Reg()
   n3=SpilledArg()
   
   { return new ALoadStmt(n0,n2,n3); }
}

AStoreStmt AStoreStmt() :
{
   NodeToken n0;
   Token n1;
   SpilledArg n2;
   Reg n3;

   
}
{
   n1="ASTORE" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SpilledArg()
   n3=Reg()
   
   { return new AStoreStmt(n0,n2,n3); }
}

PassArgStmt PassArgStmt() :
{
   NodeToken n0;
   Token n1;
   IntegerLiteral n2;
   Reg n3;

   
}
{
   n1="PASSARG" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=IntegerLiteral()
   n3=Reg()
   
   { return new PassArgStmt(n0,n2,n3); }
}

CallStmt CallStmt() :
{
   NodeToken n0;
   Token n1;
   SimpleExp n2;

   
}
{
   n1="CALL" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SimpleExp()
   
   { return new CallStmt(n0,n2); }
}

Exp Exp() :
{
   NodeChoice n0;
   HAllocate n1;
   BinOp n2;
   SimpleExp n3;

   
}
{
   (
      n1=HAllocate()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=BinOp()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=SimpleExp()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new Exp(n0); }
}

HAllocate HAllocate() :
{
   NodeToken n0;
   Token n1;
   SimpleExp n2;

   
}
{
   n1="HALLOCATE" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SimpleExp()
   
   { return new HAllocate(n0,n2); }
}

BinOp BinOp() :
{
   Operator n0;
   Reg n1;
   SimpleExp n2;

   
}
{
   n0=Operator()
   n1=Reg()
   n2=SimpleExp()
   
   { return new BinOp(n0,n1,n2); }
}

Operator Operator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;

   
}
{
   (
      n2="LT" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="PLUS" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="MINUS" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="TIMES" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="BITOR" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="BITAND" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="LSHIFT" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16="RSHIFT" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18="BITXOR" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   )
   
   { return new Operator(n0); }
}

SpilledArg SpilledArg() :
{
   NodeToken n0;
   Token n1;
   IntegerLiteral n2;

   
}
{
   n1="SPILLEDARG" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=IntegerLiteral()
   
   { return new SpilledArg(n0,n2); }
}

SimpleExp SimpleExp() :
{
   NodeChoice n0;
   Reg n1;
   IntegerLiteral n2;
   Label n3;

   
}
{
   (
      n1=Reg()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=IntegerLiteral()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Label()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new SimpleExp(n0); }
}

Reg Reg() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;

   
}
{
   (
      n2="a0" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="a1" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="a2" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="a3" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="t0" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="t1" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="t2" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16="t3" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18="t4" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20="t5" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22="t6" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24="t7" { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26="s0" { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   |
      n28="s1" { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13); }
   |
      n30="s2" { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14); }
   |
      n32="s3" { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15); }
   |
      n34="s4" { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16); }
   |
      n36="s5" { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17); }
   |
      n38="s6" { n37 = JTBToolkit.makeNodeToken(n38); }
      { n0 = new NodeChoice(n37, 18); }
   |
      n40="s7" { n39 = JTBToolkit.makeNodeToken(n40); }
      { n0 = new NodeChoice(n39, 19); }
   |
      n42="t8" { n41 = JTBToolkit.makeNodeToken(n42); }
      { n0 = new NodeChoice(n41, 20); }
   |
      n44="t9" { n43 = JTBToolkit.makeNodeToken(n44); }
      { n0 = new NodeChoice(n43, 21); }
   |
      n46="v0" { n45 = JTBToolkit.makeNodeToken(n46); }
      { n0 = new NodeChoice(n45, 22); }
   |
      n48="v1" { n47 = JTBToolkit.makeNodeToken(n48); }
      { n0 = new NodeChoice(n47, 23); }
   )
   
   { return new Reg(n0); }
}

IntegerLiteral IntegerLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

Label Label() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Label(n0); }
}

VariablePackingInfo VariablePackingInfo() :
{
   NodeToken n0;
   Token n1;
   IntegerLiteral n2;
   NodeToken n3;
   Token n4;
   IntegerLiteral n5;

   
}
{
   n1="// Number of  vars after packing =" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=IntegerLiteral()
   n4="; Number of Spilled vars =" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=IntegerLiteral()
   
   { return new VariablePackingInfo(n0,n2,n3,n5); }
}
