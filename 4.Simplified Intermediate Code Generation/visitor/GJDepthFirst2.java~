//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst2<R,A> implements GJVisitor<R,A> {

    int i;
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
     if ( n.present() ) {
         R _ret=null;
         int _count=0;
         LinkedList<R> l = new LinkedList<R>();
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            l.add(e.nextElement().accept(this,argu));
            _count++;
         }
         return (R) l;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
        if ( n.present() ){
         String a=(String)n.node.accept(this,argu);
         System.out.println(" "+a+"\n");
         return null ;
         }
      else{
         System.out.println(" ");
         return null ;
         }
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      i=((Integer)argu)+1;
      System.out.println("MAIN\n");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("\nEND\n");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      return (R) _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String l=(String)n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
     
      String num=(String)n.f2.accept(this, argu);
       System.out.println(" "+l+" [ "+num+" ]\n BEGIN\n");
      n.f3.accept(this, argu);
      String ret=(String)n.f4.accept(this, argu);
      System.out.println(" RETURN "+ret+"\n END\n");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" NOOP \n");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" ERROR \n");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String e1=(String)n.f1.accept(this, argu);
      String l1=(String)n.f2.accept(this, argu);
      System.out.println(" CJUMP "+e1+" "+l1+"\n");
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id=(String)n.f1.accept(this, argu);
      System.out.println(" JUMP "+id+"\n");
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String e1=(String)n.f1.accept(this, argu);
      String num=(String)n.f2.accept(this, argu);
      String e2=(String)n.f3.accept(this, argu);
      System.out.println(" HSTORE "+e1+" "+num+" "+e2+"\n");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t1=(String)n.f1.accept(this, argu);
      String e1=(String)n.f2.accept(this, argu);
      String num=(String)n.f3.accept(this, argu);
      System.out.println(" HLOAD "+t1+" "+e1+" "+num+"\n");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t1=(String)n.f1.accept(this, argu);
      String e1=(String)n.f2.accept(this, argu);
      System.out.println(" MOVE "+t1+" "+e1+" \n");
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String e=(String)n.f1.accept(this, argu);
      System.out.println(" PRINT "+e+"\n");
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      if(n.f0.which==5 || n.f0.which==6){
        System.out.println(" MOVE TEMP "+ i++ +" "+_ret+"\n");
        return (R)(" TEMP "+(i-1));
        }
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret=n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String e1=(String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      R fpr=n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      if(fpr==null){
        System.out.println("MOVE TEMP "+i++ +" CALL "+e1+" ( )\n");
        return (R)(" TEMP "+(i-1));
        }
       LinkedList<R> l=(LinkedList<R>) fpr;
       System.out.println("MOVE TEMP "+i++ +" CALL "+e1+" ( ");
      ListIterator<R> j = l.listIterator();
      while (j.hasNext())
          System.out.println((String)j.next()+" ");
      System.out.println(" )\n");
      return (R)(" TEMP "+(i-1));
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String e1=(String)n.f1.accept(this, argu);
      System.out.println(" MOVE TEMP "+i++ +" HALLOCATE "+e1+"\n"); 
      return (R)(" TEMP "+(i-1));
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op=(String)n.f0.accept(this, argu);
      String e1=(String)n.f1.accept(this, argu);
      String e2=(String)n.f2.accept(this, argu);
      System.out.println(" MOVE TEMP "+ i++ +" "+op+" "+e1+" "+e2+"\n");
      return (R) (" TEMP "+(i-1));
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(n.f0.which==0)
        return (R)" LT ";
      if(n.f0.which==1)
        return (R)" PLUS ";
      if(n.f0.which==2)
        return (R)" MINUS ";
      if(n.f0.which==3)
        return (R)" TIMES ";
      
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String num=(String)n.f1.accept(this, argu);
        
      return (R)(" TEMP "+num+" ");
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.toString();
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) n.f0.toString();
   }

}
